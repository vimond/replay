// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`getPlayerUIRenderer() returns a full method which when called renders and recognises the specified props. 1`] = `
<PlayerUIContainer
  className="replay"
  classNamePrefix="replay-"
  configuration={
    Object {
      "controls": Object {
        "liveDisplayMode": "clock-time",
        "qualitySelectionStrategy": "cap-bitrate",
        "skipButtonOffset": -20,
      },
      "setting": "value",
    }
  }
  render={[Function]}
>
  <AspectRatio
    aspectFixClassName="aspect-ratio-fix"
    classNamePrefix="replay-"
    render={[Function]}
    rootClassName="replay"
  >
    <div
      className="replay replay-aspect-ratio-fix"
    >
      <Fullscreen
        render={[Function]}
      >
        <InteractionDetector
          configuration={
            Object {
              "controls": Object {
                "liveDisplayMode": "clock-time",
                "qualitySelectionStrategy": "cap-bitrate",
                "skipButtonOffset": -20,
              },
              "setting": "value",
            }
          }
          render={[Function]}
        >
          <ConnectedKeyboardShortcuts
            configuration={
              Object {
                "controls": Object {
                  "liveDisplayMode": "clock-time",
                  "qualitySelectionStrategy": "cap-bitrate",
                  "skipButtonOffset": -20,
                },
                "setting": "value",
              }
            }
            fullscreenState={
              Object {
                "enterFullscreen": [Function],
                "exitFullscreen": [Function],
                "isFullscreen": false,
                "setProperties": [Function],
              }
            }
            nudge={[Function]}
            render={[Function]}
            toggleFixedUserActive={[Function]}
          >
            <KeyboardShortcuts
              configuration={
                Object {
                  "controls": Object {
                    "liveDisplayMode": "clock-time",
                    "qualitySelectionStrategy": "cap-bitrate",
                    "skipButtonOffset": -20,
                  },
                  "setting": "value",
                }
              }
              fullscreenState={
                Object {
                  "enterFullscreen": [Function],
                  "exitFullscreen": [Function],
                  "isFullscreen": false,
                  "setProperties": [Function],
                }
              }
              inspect={[Function]}
              nudge={[Function]}
              render={[Function]}
              setProperties={[Function]}
              toggleFixedUserActive={[Function]}
            >
              <ResponsiveClassNames
                configuration={
                  Object {
                    "controls": Object {
                      "liveDisplayMode": "clock-time",
                      "qualitySelectionStrategy": "cap-bitrate",
                      "skipButtonOffset": -20,
                    },
                    "setting": "value",
                  }
                }
                onRef={[Function]}
                render={[Function]}
              >
                <ConnectedPlayerStateClassNames
                  className="ui-container"
                  classNameDefinitions={
                    Object {
                      "isAtLiveEdge": "is-at-live-edge",
                      "isBuffering": "is-buffering",
                      "isDvrEnabled": "is-dvr-enabled",
                      "isFailed": "is-failed",
                      "isFullscreen": "is-fullscreen",
                      "isLive": "is-live",
                      "isMuted": "is-muted",
                      "isOnDemand": "is-on-demand",
                      "isPaused": "is-paused",
                      "isPlaying": "is-playing",
                      "isSeeking": "is-seeking",
                      "isStarting": "is-starting",
                      "isUserActive": "is-user-active",
                      "isUserInactive": "is-user-inactive",
                      "responsivenessPrefix": "player-size-",
                      "volumePrefix": "volume-level-",
                    }
                  }
                  classNamePrefix="replay-"
                  enterFullscreen={[Function]}
                  exitFullscreen={[Function]}
                  extraClassNames={Array []}
                  isFullscreen={false}
                  isUserActive={true}
                  nudge={[Function]}
                  render={[Function]}
                  setProperties={[Function]}
                  toggleFixedUserActive={[Function]}
                >
                  <PlayerStateClassNames
                    className="ui-container"
                    classNameDefinitions={
                      Object {
                        "isAtLiveEdge": "is-at-live-edge",
                        "isBuffering": "is-buffering",
                        "isDvrEnabled": "is-dvr-enabled",
                        "isFailed": "is-failed",
                        "isFullscreen": "is-fullscreen",
                        "isLive": "is-live",
                        "isMuted": "is-muted",
                        "isOnDemand": "is-on-demand",
                        "isPaused": "is-paused",
                        "isPlaying": "is-playing",
                        "isSeeking": "is-seeking",
                        "isStarting": "is-starting",
                        "isUserActive": "is-user-active",
                        "isUserInactive": "is-user-inactive",
                        "responsivenessPrefix": "player-size-",
                        "volumePrefix": "volume-level-",
                      }
                    }
                    classNamePrefix="replay-"
                    enterFullscreen={[Function]}
                    exitFullscreen={[Function]}
                    extraClassNames={Array []}
                    inspect={[Function]}
                    isFullscreen={false}
                    isUserActive={true}
                    nudge={[Function]}
                    render={[Function]}
                    setProperties={[Function]}
                    toggleFixedUserActive={[Function]}
                  >
                    <div
                      className="replay-is-user-active replay-ui-container"
                      onFocus={[Function]}
                      onKeyDown={[Function]}
                      onMouseMove={[Function]}
                      onTouchEnd={[Function]}
                      onTouchStart={[Function]}
                      tabIndex={0}
                    >
                      <ControlledVideoStreamer
                        classNamePrefix="replay-"
                      />
                      <RenderIfEnabled>
                        <ExitButton
                          classNamePrefix="replay-"
                          content={<ForwardRef />}
                          label="Exit"
                          onClick={
                            [MockFunction] {
                              "calls": Array [
                                Array [],
                              ],
                              "results": Array [
                                Object {
                                  "type": "return",
                                  "value": undefined,
                                },
                              ],
                            }
                          }
                        >
                          <Button
                            className="exit-button"
                            classNamePrefix="replay-"
                            content={<ForwardRef />}
                            label="Exit"
                            onClick={
                              [MockFunction] {
                                "calls": Array [
                                  Array [],
                                ],
                                "results": Array [
                                  Object {
                                    "type": "return",
                                    "value": undefined,
                                  },
                                ],
                              }
                            }
                            useDefaultClassNaming={true}
                          >
                            <div
                              className="replay-button replay-exit-button"
                              onClick={[Function]}
                              onKeyDown={[Function]}
                              onKeyUp={[Function]}
                              role="button"
                              tabIndex={0}
                              title="Exit"
                            >
                              <div
                                tabIndex={-1}
                              >
                                <XCircle>
                                  <svg
                                    fill="none"
                                    height={24}
                                    stroke="currentColor"
                                    strokeLinecap="round"
                                    strokeLinejoin="round"
                                    strokeWidth="2"
                                    viewBox="0 0 24 24"
                                    width={24}
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <circle
                                      cx="12"
                                      cy="12"
                                      r="10"
                                    />
                                    <line
                                      x1="15"
                                      x2="9"
                                      y1="9"
                                      y2="15"
                                    />
                                    <line
                                      x1="9"
                                      x2="15"
                                      y1="9"
                                      y2="15"
                                    />
                                  </svg>
                                </XCircle>
                              </div>
                            </div>
                          </Button>
                        </ExitButton>
                        <PlaybackMonitor
                          classNamePrefix="replay-"
                          closeButtonContent={<ForwardRef />}
                          configuration={
                            Object {
                              "controls": Object {
                                "liveDisplayMode": "clock-time",
                                "qualitySelectionStrategy": "cap-bitrate",
                                "skipButtonOffset": -20,
                              },
                              "setting": "value",
                            }
                          }
                        />
                      </RenderIfEnabled>
                      <ControlsBar
                        classNamePrefix="replay-"
                        useDefaultClassNaming={true}
                      >
                        <div
                          className="replay-controls-bar"
                        >
                          <RenderIfEnabled>
                            <ConnectedPlayPauseButton
                              classNamePrefix="replay-"
                              label="Toggle play/pause"
                              pausedContent={<ForwardRef />}
                              playingContent={<ForwardRef />}
                            >
                              <PlayPauseButton
                                classNamePrefix="replay-"
                                inspect={[Function]}
                                label="Toggle play/pause"
                                pausedContent={<ForwardRef />}
                                playingContent={<ForwardRef />}
                                setProperties={[Function]}
                              >
                                <ToggleButton
                                  className="play-pause-button"
                                  classNamePrefix="replay-"
                                  label="Toggle play/pause"
                                  onToggle={[Function]}
                                  toggledOffContent={<ForwardRef />}
                                  toggledOnContent={<ForwardRef />}
                                  useDefaultClassNaming={true}
                                >
                                  <div
                                    className="replay-play-pause-button replay-toggle-button replay-toggled-off"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onKeyUp={[Function]}
                                    role="button"
                                    tabIndex={0}
                                    title="Toggle play/pause"
                                  >
                                    <div
                                      tabIndex={-1}
                                    >
                                      <Pause>
                                        <svg
                                          fill="none"
                                          height={24}
                                          stroke="currentColor"
                                          strokeLinecap="round"
                                          strokeLinejoin="round"
                                          strokeWidth="2"
                                          viewBox="0 0 24 24"
                                          width={24}
                                          xmlns="http://www.w3.org/2000/svg"
                                        >
                                          <rect
                                            height="16"
                                            width="4"
                                            x="6"
                                            y="4"
                                          />
                                          <rect
                                            height="16"
                                            width="4"
                                            x="14"
                                            y="4"
                                          />
                                        </svg>
                                      </Pause>
                                    </div>
                                  </div>
                                </ToggleButton>
                              </PlayPauseButton>
                            </ConnectedPlayPauseButton>
                            <ConnectedSkipButton
                              classNamePrefix="replay-"
                              content={
                                <React.Fragment>
                                  <span>
                                    <ForwardRef />
                                  </span>
                                  <span>
                                    –10
                                  </span>
                                </React.Fragment>
                              }
                              label="Skip back 10 seconds"
                              offset={-20}
                              seconds="–10"
                            >
                              <SkipButton
                                classNamePrefix="replay-"
                                content={
                                  <React.Fragment>
                                    <span>
                                      <ForwardRef />
                                    </span>
                                    <span>
                                      –10
                                    </span>
                                  </React.Fragment>
                                }
                                inspect={[Function]}
                                label="Skip back 10 seconds"
                                offset={-20}
                                seconds="–10"
                                setProperties={[Function]}
                              >
                                <Button
                                  className="skip-button"
                                  classNamePrefix="replay-"
                                  content={
                                    <React.Fragment>
                                      <span>
                                        <ForwardRef />
                                      </span>
                                      <span>
                                        –10
                                      </span>
                                    </React.Fragment>
                                  }
                                  label="Skip back 10 seconds"
                                  onClick={[Function]}
                                  useDefaultClassNaming={true}
                                >
                                  <div
                                    className="replay-button replay-skip-button"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onKeyUp={[Function]}
                                    role="button"
                                    tabIndex={0}
                                    title="Skip back 10 seconds"
                                  >
                                    <div
                                      tabIndex={-1}
                                    >
                                      <span>
                                        <RotateCcw>
                                          <svg
                                            fill="none"
                                            height={24}
                                            stroke="currentColor"
                                            strokeLinecap="round"
                                            strokeLinejoin="round"
                                            strokeWidth="2"
                                            viewBox="0 0 24 24"
                                            width={24}
                                            xmlns="http://www.w3.org/2000/svg"
                                          >
                                            <polyline
                                              points="1 4 1 10 7 10"
                                            />
                                            <path
                                              d="M3.51 15a9 9 0 1 0 2.13-9.36L1 10"
                                            />
                                          </svg>
                                        </RotateCcw>
                                      </span>
                                      <span>
                                        –10
                                      </span>
                                    </div>
                                  </div>
                                </Button>
                              </SkipButton>
                            </ConnectedSkipButton>
                            <ConnectedTimeline
                              classNamePrefix="replay-"
                              handleContent=""
                              label="Timeline"
                              trackContent={<div />}
                            >
                              <Timeline
                                classNamePrefix="replay-"
                                handleContent=""
                                inspect={[Function]}
                                label="Timeline"
                                reduceDragGlitch={true}
                                setProperties={[Function]}
                                trackContent={<div />}
                              >
                                <Slider
                                  className="timeline"
                                  classNamePrefix="replay-"
                                  handleClassName="timeline-handle"
                                  handleContent=""
                                  isUpdateBlocked={false}
                                  label="Timeline"
                                  maxValue={1}
                                  onDrag={[Function]}
                                  onValueChange={[Function]}
                                  trackClassName="timeline-track"
                                  trackContent={<div />}
                                  value={0}
                                >
                                  <div
                                    aria-valuemax={1}
                                    aria-valuemin={0}
                                    aria-valuenow={0}
                                    className="replay-slider replay-timeline"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onKeyUp={[Function]}
                                    onMouseDown={[Function]}
                                    onMouseEnter={[Function]}
                                    onMouseLeave={[Function]}
                                    onMouseMove={[Function]}
                                    onMouseUp={[Function]}
                                    onTouchEnd={[Function]}
                                    onTouchMove={[Function]}
                                    onTouchStart={[Function]}
                                    role="slider"
                                    tabIndex={0}
                                    title="Timeline"
                                  >
                                    <div
                                      className="replay-slider-track replay-timeline-track"
                                    >
                                      <div />
                                    </div>
                                    <ConnectedTimelineInformation
                                      classNamePrefix="replay-"
                                      key=".0"
                                    >
                                      <TimelineInformation
                                        classNamePrefix="replay-"
                                        inspect={[Function]}
                                        setProperties={[Function]}
                                      >
                                        <div
                                          className="replay-timeline-information"
                                        >
                                          <div
                                            className="replay-timeline-tooltip"
                                            style={
                                              Object {
                                                "left": "0.00%",
                                              }
                                            }
                                          />
                                        </div>
                                      </TimelineInformation>
                                    </ConnectedTimelineInformation>
                                    <div
                                      className="replay-slider-handle replay-timeline-handle"
                                      role="button"
                                      style={
                                        Object {
                                          "left": "0%",
                                        }
                                      }
                                      tabIndex={-1}
                                    />
                                  </div>
                                </Slider>
                              </Timeline>
                            </ConnectedTimeline>
                            <ConnectedTimeDisplay
                              classNamePrefix="replay-"
                              clockTimeLabel="Clock time"
                              durationLabel="Duration"
                              label="Video times"
                              liveDisplayMode="clock-time"
                              negativeMark="–"
                              positionLabel="Current time"
                            >
                              <TimeDisplay
                                classNamePrefix="replay-"
                                clockTimeLabel="Clock time"
                                durationLabel="Duration"
                                inspect={[Function]}
                                label="Video times"
                                liveDisplayMode="clock-time"
                                negativeMark="–"
                                positionLabel="Current time"
                                setProperties={[Function]}
                              >
                                <div
                                  className="replay-time-display"
                                  title="Video times"
                                >
                                  <span
                                    className="replay-time-display-position"
                                    title="Current time"
                                  >
                                    00:00
                                  </span>
                                </div>
                              </TimeDisplay>
                            </ConnectedTimeDisplay>
                            <ConnectedGotoLiveButton
                              classNamePrefix="replay-"
                              gotoLive="Go live"
                              isAtLiveEdgeContent={
                                <span>
                                  Live
                                </span>
                              }
                              isLive="Live"
                              isNotAtLiveEdgeContent={
                                <span>
                                  Go live
                                </span>
                              }
                              label="Play from live position"
                            >
                              <GotoLiveButton
                                classNamePrefix="replay-"
                                gotoLive="Go live"
                                inspect={[Function]}
                                isAtLiveEdgeContent={
                                  <span>
                                    Live
                                  </span>
                                }
                                isLive="Live"
                                isNotAtLiveEdgeContent={
                                  <span>
                                    Go live
                                  </span>
                                }
                                label="Play from live position"
                                setProperties={[Function]}
                              />
                            </ConnectedGotoLiveButton>
                            <ConnectedSettingsStorageVolume
                              classNamePrefix="replay-"
                              configuration={
                                Object {
                                  "controls": Object {
                                    "liveDisplayMode": "clock-time",
                                    "qualitySelectionStrategy": "cap-bitrate",
                                    "skipButtonOffset": -20,
                                  },
                                  "setting": "value",
                                }
                              }
                              label="Volume and mute"
                              muteToggleLabel="Toggle mute"
                              mutedContent={<ForwardRef />}
                              unmutedContent={<ForwardRef />}
                              volumeSliderHandleContent=""
                              volumeSliderLabel="Volume setting"
                            >
                              <SettingsStorageVolume
                                classNamePrefix="replay-"
                                configuration={
                                  Object {
                                    "controls": Object {
                                      "liveDisplayMode": "clock-time",
                                      "qualitySelectionStrategy": "cap-bitrate",
                                      "skipButtonOffset": -20,
                                    },
                                    "setting": "value",
                                  }
                                }
                                inspect={[Function]}
                                label="Volume and mute"
                                muteToggleLabel="Toggle mute"
                                mutedContent={<ForwardRef />}
                                setProperties={[Function]}
                                unmutedContent={<ForwardRef />}
                                volumeSliderHandleContent=""
                                volumeSliderLabel="Volume setting"
                              >
                                <Volume
                                  classNamePrefix="replay-"
                                  inspect={[Function]}
                                  label="Volume and mute"
                                  muteToggleLabel="Toggle mute"
                                  mutedContent={<ForwardRef />}
                                  setProperties={[Function]}
                                  unmutedContent={<ForwardRef />}
                                  volumeSliderHandleContent=""
                                  volumeSliderLabel="Volume setting"
                                >
                                  <div
                                    className="replay-volume"
                                    title="Volume and mute"
                                  >
                                    <ToggleButton
                                      className="mute-toggle"
                                      classNamePrefix="replay-"
                                      label="Toggle mute"
                                      onToggle={[Function]}
                                      toggledOffContent={<ForwardRef />}
                                      toggledOnContent={<ForwardRef />}
                                      useDefaultClassNaming={true}
                                    >
                                      <div
                                        className="replay-mute-toggle replay-toggle-button replay-toggled-off"
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        role="button"
                                        tabIndex={0}
                                        title="Toggle mute"
                                      >
                                        <div
                                          tabIndex={-1}
                                        >
                                          <Volume2>
                                            <svg
                                              fill="none"
                                              height={24}
                                              stroke="currentColor"
                                              strokeLinecap="round"
                                              strokeLinejoin="round"
                                              strokeWidth="2"
                                              viewBox="0 0 24 24"
                                              width={24}
                                              xmlns="http://www.w3.org/2000/svg"
                                            >
                                              <polygon
                                                points="11 5 6 9 2 9 2 15 6 15 11 19 11 5"
                                              />
                                              <path
                                                d="M19.07 4.93a10 10 0 0 1 0 14.14M15.54 8.46a5 5 0 0 1 0 7.07"
                                              />
                                            </svg>
                                          </Volume2>
                                        </div>
                                      </div>
                                    </ToggleButton>
                                    <Slider
                                      className="volume-slider"
                                      classNamePrefix="replay-"
                                      handleClassName="volume-slider-handle"
                                      handleContent=""
                                      label="Volume setting"
                                      maxValue={1}
                                      onValueChange={[Function]}
                                      trackClassName="volume-slider-track"
                                      value={0}
                                    >
                                      <div
                                        aria-valuemax={1}
                                        aria-valuemin={0}
                                        aria-valuenow={0}
                                        className="replay-slider replay-volume-slider"
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseEnter={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseMove={[Function]}
                                        onMouseUp={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        role="slider"
                                        tabIndex={0}
                                        title="Volume setting"
                                      >
                                        <div
                                          className="replay-slider-track replay-volume-slider-track"
                                        />
                                        <div
                                          className="replay-slider-handle replay-volume-slider-handle"
                                          role="button"
                                          style={
                                            Object {
                                              "left": "0%",
                                            }
                                          }
                                          tabIndex={-1}
                                        />
                                      </div>
                                    </Slider>
                                  </div>
                                </Volume>
                              </SettingsStorageVolume>
                            </ConnectedSettingsStorageVolume>
                            <ConnectedSettingsStorageAudioSelector
                              classNamePrefix="replay-"
                              configuration={
                                Object {
                                  "controls": Object {
                                    "liveDisplayMode": "clock-time",
                                    "qualitySelectionStrategy": "cap-bitrate",
                                    "skipButtonOffset": -20,
                                  },
                                  "setting": "value",
                                }
                              }
                              label="Audio track selector"
                              toggleContent={<ForwardRef />}
                            >
                              <SettingsStorageAudioSelector
                                classNamePrefix="replay-"
                                configuration={
                                  Object {
                                    "controls": Object {
                                      "liveDisplayMode": "clock-time",
                                      "qualitySelectionStrategy": "cap-bitrate",
                                      "skipButtonOffset": -20,
                                    },
                                    "setting": "value",
                                  }
                                }
                                inspect={[Function]}
                                label="Audio track selector"
                                setProperties={[Function]}
                                toggleContent={<ForwardRef />}
                              >
                                <AudioSelector
                                  classNamePrefix="replay-"
                                  inspect={[Function]}
                                  label="Audio track selector"
                                  setProperties={[Function]}
                                  toggleContent={<ForwardRef />}
                                />
                              </SettingsStorageAudioSelector>
                            </ConnectedSettingsStorageAudioSelector>
                            <ConnectedSettingsStorageSubtitlesSelector
                              classNamePrefix="replay-"
                              configuration={
                                Object {
                                  "controls": Object {
                                    "liveDisplayMode": "clock-time",
                                    "qualitySelectionStrategy": "cap-bitrate",
                                    "skipButtonOffset": -20,
                                  },
                                  "setting": "value",
                                }
                              }
                              label="Subtitles selector"
                              noSubtitlesLabel="No subtitles"
                              toggleContent={<ForwardRef />}
                            >
                              <SettingsStorageSubtitlesSelector
                                classNamePrefix="replay-"
                                configuration={
                                  Object {
                                    "controls": Object {
                                      "liveDisplayMode": "clock-time",
                                      "qualitySelectionStrategy": "cap-bitrate",
                                      "skipButtonOffset": -20,
                                    },
                                    "setting": "value",
                                  }
                                }
                                inspect={[Function]}
                                label="Subtitles selector"
                                noSubtitlesLabel="No subtitles"
                                setProperties={[Function]}
                                toggleContent={<ForwardRef />}
                              >
                                <SubtitlesSelector
                                  classNamePrefix="replay-"
                                  inspect={[Function]}
                                  label="Subtitles selector"
                                  noSubtitlesLabel="No subtitles"
                                  setProperties={[Function]}
                                  toggleContent={<ForwardRef />}
                                />
                              </SettingsStorageSubtitlesSelector>
                            </ConnectedSettingsStorageSubtitlesSelector>
                            <ConnectedQualitySelector
                              autoLabel="Automatic"
                              classNamePrefix="replay-"
                              formatBitrateLabel={[Function]}
                              label="Video quality selector"
                              selectionStrategy="cap-bitrate"
                              toggleContent={<ForwardRef />}
                            >
                              <QualitySelector
                                autoLabel="Automatic"
                                classNamePrefix="replay-"
                                formatBitrateLabel={[Function]}
                                inspect={[Function]}
                                label="Video quality selector"
                                selectionStrategy="cap-bitrate"
                                setProperties={[Function]}
                                toggleContent={<ForwardRef />}
                              />
                            </ConnectedQualitySelector>
                            <ConnectedPipButton
                              classNamePrefix="replay-"
                              label="Toggle picture-in-picture mode"
                              pipActiveContent={<ForwardRef />}
                              pipInactiveContent={<ForwardRef />}
                            >
                              <PipButton
                                classNamePrefix="replay-"
                                inspect={[Function]}
                                label="Toggle picture-in-picture mode"
                                pipActiveContent={<ForwardRef />}
                                pipInactiveContent={<ForwardRef />}
                                setProperties={[Function]}
                              />
                            </ConnectedPipButton>
                            <ConnectedAirPlayButton
                              airPlayActiveContent={<ForwardRef />}
                              airPlayInactiveContent={<ForwardRef />}
                              classNamePrefix="replay-"
                              label="Select AirPlay device"
                            >
                              <AirPlayButton
                                airPlayActiveContent={<ForwardRef />}
                                airPlayInactiveContent={<ForwardRef />}
                                classNamePrefix="replay-"
                                inspect={[Function]}
                                label="Select AirPlay device"
                                setProperties={[Function]}
                              />
                            </ConnectedAirPlayButton>
                            <FullscreenButton
                              classNamePrefix="replay-"
                              enterFullscreen={[Function]}
                              exitFullscreen={[Function]}
                              fullscreenContent={<ForwardRef />}
                              isFullscreen={false}
                              label="Toggle fullscreen"
                              normalContent={<ForwardRef />}
                              setProperties={[Function]}
                            >
                              <ToggleButton
                                className="fullscreen-button"
                                classNamePrefix="replay-"
                                isOn={false}
                                label="Toggle fullscreen"
                                onToggle={[Function]}
                                toggledOffContent={<ForwardRef />}
                                toggledOnContent={<ForwardRef />}
                                useDefaultClassNaming={true}
                              >
                                <div
                                  aria-pressed={false}
                                  className="replay-fullscreen-button replay-toggle-button replay-toggled-off"
                                  onClick={[Function]}
                                  onKeyDown={[Function]}
                                  onKeyUp={[Function]}
                                  role="button"
                                  tabIndex={0}
                                  title="Toggle fullscreen"
                                >
                                  <div
                                    tabIndex={-1}
                                  >
                                    <Maximize>
                                      <svg
                                        fill="none"
                                        height={24}
                                        stroke="currentColor"
                                        strokeLinecap="round"
                                        strokeLinejoin="round"
                                        strokeWidth="2"
                                        viewBox="0 0 24 24"
                                        width={24}
                                        xmlns="http://www.w3.org/2000/svg"
                                      >
                                        <path
                                          d="M8 3H5a2 2 0 0 0-2 2v3m18 0V5a2 2 0 0 0-2-2h-3m0 18h3a2 2 0 0 0 2-2v-3M3 16v3a2 2 0 0 0 2 2h3"
                                        />
                                      </svg>
                                    </Maximize>
                                  </div>
                                </div>
                              </ToggleButton>
                            </FullscreenButton>
                          </RenderIfEnabled>
                        </div>
                      </ControlsBar>
                      <RenderIfEnabled>
                        <ConnectedBufferingIndicator
                          classNamePrefix="replay-"
                          content={<LoadingAnimation />}
                          label="Video is buffering"
                          renderStrategy="always"
                        >
                          <BufferingIndicator
                            classNamePrefix="replay-"
                            content={<LoadingAnimation />}
                            inspect={[Function]}
                            label="Video is buffering"
                            renderStrategy="always"
                            setProperties={[Function]}
                          >
                            <div
                              className="replay-buffering-indicator"
                            >
                              <LoadingAnimation>
                                <svg
                                  height="100%"
                                  stroke="currentColor"
                                  viewBox="0 0 38 38"
                                  width="100%"
                                >
                                  <g
                                    fill="none"
                                    fillRule="evenodd"
                                  >
                                    <g
                                      strokeWidth="2"
                                      transform="translate(1 1)"
                                    >
                                      <circle
                                        cx="18"
                                        cy="18"
                                        r="18"
                                        stroke="currentColor"
                                        strokeOpacity="0.5"
                                      />
                                      <path
                                        className="animated"
                                        d="M36 18c0-9.94-8.06-18-18-18"
                                      />
                                    </g>
                                  </g>
                                </svg>
                              </LoadingAnimation>
                            </div>
                          </BufferingIndicator>
                        </ConnectedBufferingIndicator>
                      </RenderIfEnabled>
                      <ConnectedPreferredSettingsApplicator
                        configuration={
                          Object {
                            "controls": Object {
                              "liveDisplayMode": "clock-time",
                              "qualitySelectionStrategy": "cap-bitrate",
                              "skipButtonOffset": -20,
                            },
                            "setting": "value",
                          }
                        }
                      >
                        <PreferredSettingsApplicator
                          configuration={
                            Object {
                              "controls": Object {
                                "liveDisplayMode": "clock-time",
                                "qualitySelectionStrategy": "cap-bitrate",
                                "skipButtonOffset": -20,
                              },
                              "setting": "value",
                            }
                          }
                          inspect={[Function]}
                          setProperties={[Function]}
                        />
                      </ConnectedPreferredSettingsApplicator>
                    </div>
                  </PlayerStateClassNames>
                </ConnectedPlayerStateClassNames>
              </ResponsiveClassNames>
            </KeyboardShortcuts>
          </ConnectedKeyboardShortcuts>
        </InteractionDetector>
      </Fullscreen>
    </div>
  </AspectRatio>
</PlayerUIContainer>
`;
