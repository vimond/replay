{"version":3,"sources":["webpack:///./src/replay/docs/custom-player/custom-strings-graphics.mdx"],"names":["MDXContent","React","Component","constructor","props","super","this","layout","render","components","name","parentName"],"mappings":"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","file":"static/js/docs-custom-player-custom-strings-graphics.42ff5861.js","sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}><MDXTag name=\"h1\" components={components} props={{\"id\":\"how-to-change-graphics-or-texts\"}}>{`How to change graphics or texts`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This chapter describes how to customise either the texts (strings) used in the player, or the graphics (icons). For instance internationalisation can be implemented by composing a custom player with a different set of strings.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Similarly, a different design can be set up in a custom player by passing a different set of icons. Icons can be specified as characters in special fonts (along with CSS importing and defining the font face), SVG, or even bitmaps in `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`<img/>`}</MDXTag>{` elements if desired.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`One or both of these sets can be combined when creating a custom player, and also along with a custom player UI render method.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"the-player-composer\"}}>{`The player composer`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The easiest approach to replace the set of strings/and or graphics, is to use the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`composePlayer()`}</MDXTag>{` method. It produces a React component from what's typically being subject to customisation.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`As a starting point, this is how the `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://github.com/vimond/replay/blob/master/src/replay/default-player/Replay.js\"}}>{`default Replay player`}</MDXTag>{` is composed, with parameters specifying the strings and graphics to be part of the Replay component:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`import composePlayer from '../playerComposer';\nimport graphics from './default-skin/graphics';\nimport strings from './strings';\n\nconst Replay = composePlayer({\n  name: 'Replay',\n  graphics,\n  strings\n});\n\n// This is the component to be consumed in a full React SPA.\nexport default Replay;\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"how-are-texts-and-graphics-defined\"}}>{`How are texts and graphics defined?`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://github.com/vimond/replay/blob/master/src/replay/default-player/strings.js\"}}>{`default strings`}</MDXTag>{`, as referred by the composition of the Replay player, are grouped by controls. The properties for each controls correspond to actually prop types expected by the control. Most of the strings are tooltip texts, with some exceptions.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Similarly, for the `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://github.com/vimond/replay/blob/master/src/replay/default-player/default-skin/graphics.js\"}}>{`graphics for the default skin`}</MDXTag>{`, the definitions are structured per control or component. Here, the property values are mainly SVG graphics from the `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://feathericons.com/\"}}>{`Feather`}</MDXTag>{` icon set, wrapped as React components, so that they can be rendered within the control directly.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Again, the property keys refer to prop names of the controls. Graphics can be added to all props with type `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`React.Node`}</MDXTag>{`, as listed in the controls reference. And as long as the property values are accepted by React and the browser, the graphics or content can be any element types.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"replacing-the-strings-or-graphics-sets\"}}>{`Replacing the strings or graphics sets`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`It is recommended to create a copy of the mentioned files as a start point, and perform the desired modifications. If also the control set (player UI) is different, properties for new controls might be added to the definitions, or unused definitions removed.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`A custom player component can then be created by referring and passing in the (in this case imaginary) new files to the player composer:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`import composePlayer from 'vimond-replay/playerComposer';\nimport graphics from './my-custom-skin/graphics';\nimport strings from './my-localization/strings-nn_no';\n\nconst CustomPlayer = composePlayer({\n  name: 'CustomPlayer',\n  graphics,\n  strings\n});\n\nexport default CustomPlayer;\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`The resulting player component can be used just like Replay.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-jsx\"}}>{`<CustomPlayer source=\"...\" />\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"combining-new-texts-andor-graphics-with-a-custom-ui\"}}>{`Combining new texts and/or graphics with a custom UI`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`If also adding a custom UI through a `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"/custom-player/add-controls-components#adding-a-title-overlay---step-by-step\"}}>{`custom player UI render method`}</MDXTag>{`, the custom set of strings or graphics should be imported and included directly in the render method. How to this, is shown in the referred example.`}</MDXTag>\n           </MDXTag>\n  }\n}\n  "],"sourceRoot":""}