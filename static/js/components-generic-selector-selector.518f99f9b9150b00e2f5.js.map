{"version":3,"sources":["webpack:///./src/replay/components/common.js","webpack:///./src/replay/components/generic/Selector/helpers.js","webpack:///./src/replay/components/generic/Selector/Selector.js","webpack:///./src/replay/components/generic/Selector/Selector.mdx","webpack:///./src/replay/components/generic/ToggleButton/ToggleButton.js"],"names":["defaultClassNamePrefix","prefixClassNames","prefix","names","sanitizedPrefix","classNameArray","i","length","push","join","isDefined","item","hydrateClassNames","classes","selectClasses","classNames","classNamePrefix","selectedClasses","Array","isArray","filter","getBoundingEventCoordinates","evt","element","domRect","currentTarget","getBoundingClientRect","extractedEvent","touches","changedTouches","x","Math","max","min","pageX","left","width","y","pageY","top","height","getKeyboardShortcutBlocker","keysToBeBlocked","keyboardEvent","indexOf","key","preventDefault","stopPropagation","isDifferent","a","b","Date","getTime","Number","isNaN","isObject","obj","constructor","isShallowEqual","keysA","Object","keys","keysB","deepClone","clone","original","forEach","override","base","overrides","copy","extension","getOwnPropertyNames","formatTimeComponent","integer","separator","emptyIfZero","pad","formatTime","seconds","negativeMark","rounded","round","includedNegativeMark","Infinity","days","floor","daysInSeconds","hours","hoursAndDaysInSeconds","minutes","secs","formatClockTime","date","isValidDate","getHours","getMinutes","getSeconds","getIntervalRunner","method","intervalSeconds","intervalID","start","setInterval","stop","clearInterval","selectItemClasses","selectorItem","selectItemSelectedClasses","selectorItemSelected","SelectorItem","React","this","props","onRef","index","onSelect","data","handleClick","render","className","defaultItemClassName","isSelected","canReceiveFocus","selectedClassName","label","tabIndex","undefined","role","aria-selected","ref","handleRef","onClick","onKeyDown","handleKeyDown","onKeyUp","handleKeyUp","focusElement","upwards","isReverseOrder","items","baseElement","elements","slice","reverse","concat","document","activeElement","j","focus","selectCollapsedClasses","selectorCollapsed","selector","selectExpandedClasses","selectorExpanded","selectItemsContainerClasses","selectorItemsContainer","Selector","super","toggleElement","isOn","setState","isExpanded","itemElement","focusableItems","itemData","itemMapper","id","handleItemRef","selectedItem","state","itemClassName","reverseOrder","collapsedToggleContent","expandedToggleContent","renderedItems","map","renderSelectorItem","itemsContainerClassNames","toggleButtonClasses","toggleButtonOff","selectorToggle","selectorToggleOff","toggleButtonOn","selectorToggleOn","onMouseLeave","handleMouseLeave","ToggleButton","onToggle","handleToggle","onToggleRef","toggledOffContent","toggledOnContent","useDefaultClassNaming","MDXContent","Component","layout","components","name","__codesandbox","__position","__code","__scope","of","selectOffClasses","toggleButton","selectOnClasses","toggleClassName","content","aria-pressed","title"],"mappings":"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","file":"static/js/components-generic-selector-selector.8ec6665c.js","sourcesContent":["//@flow\n\ntype Classes = { [string]: ?string };\n\nexport type CommonGenericProps = {\n  classes?: ?Classes,\n  classNamePrefix?: string,\n  className?: string\n};\n\nexport type CommonProps = {\n  classNamePrefix?: string,\n  label?: string\n};\n\nexport type Id = string | number;\n\ntype Coordinates = { x: number, y: number, width: number, height: number };\n\nexport const defaultClassNamePrefix = 'replay-';\n\nexport function prefixClassNames(prefix: ?string, ...names: Array<?string>): string {\n  const sanitizedPrefix = prefix == null ? '' : prefix;\n  const classNameArray = [];\n  for (let i = 0; i < names.length; i++) {\n    // Early optimisation: For loop is more effective than map/filter...\n    if (names[i]) {\n      classNameArray.push(sanitizedPrefix + names[i]);\n    }\n  }\n  return classNameArray.join(' ');\n}\n\n/*export function buildClassNames(useDefaultClassNaming: ?boolean, prefix: ?string, ...names: Array<?string>): string {\n  return useDefaultClassNaming ? prefixClassNames(prefix, ...names) : names[0] || '';\n}*/\n\nconst isDefined = item => item;\n\nexport function hydrateClassNames({\n  classes,\n  selectClasses,\n  classNames,\n  classNamePrefix\n}: {\n  classes: ?Classes,\n  selectClasses: Classes => ?string | ?Array<?string>,\n  classNames?: Array<?string>,\n  classNamePrefix?: string\n}): ?string {\n  if (classes && selectClasses) {\n    const selectedClasses = selectClasses(classes);\n    if (Array.isArray(selectedClasses)) {\n      return selectedClasses.filter(isDefined).join(' ');\n    } else {\n      return selectedClasses;\n    }\n  } else if (classNames) {\n    return prefixClassNames(classNamePrefix, ...classNames);\n  }\n}\n\nexport function getBoundingEventCoordinates(evt: any, element?: HTMLElement): Coordinates {\n  // Difficult to code this with strict typing in a JS-optimal way. Sticking to any for the event.\n  const domRect = (element || evt.currentTarget).getBoundingClientRect();\n  let extractedEvent;\n  if (evt.touches && evt.touches.length > 0) {\n    extractedEvent = evt.touches[0];\n  } else if (evt.changedTouches && evt.changedTouches.length > 0) {\n    extractedEvent = evt.changedTouches[0];\n  } else {\n    extractedEvent = evt;\n  }\n  return {\n    x: Math.max(0, Math.min(extractedEvent.pageX - domRect.left, domRect.width)),\n    y: Math.max(0, Math.min(extractedEvent.pageY - domRect.top, domRect.height)),\n    width: domRect.width,\n    height: domRect.height\n  };\n}\n\nexport function getKeyboardShortcutBlocker(keysToBeBlocked: Array<string>): KeyboardEvent => void {\n  return (keyboardEvent: KeyboardEvent) => {\n    if (keysToBeBlocked.indexOf(keyboardEvent.key) >= 0) {\n      keyboardEvent.preventDefault();\n      keyboardEvent.stopPropagation();\n    }\n  };\n}\n\nexport const isDifferent = (a: any, b: any) => {\n  if (a === b) {\n    return false;\n  }\n  if (a instanceof Date && b instanceof Date && a.getTime() === b.getTime()) {\n    return false;\n  }\n  return !(Number.isNaN(a) && Number.isNaN(b));\n};\n\nexport const isObject = (obj: ?{}) => obj != null && obj.constructor === {}.constructor;\n\nexport const isShallowEqual = (a: any, b: any): boolean => {\n  if (a === b) {\n    return true;\n  } else if (isObject(a) && isObject(b)) {\n    const keysA = Object.keys(a);\n    const keysB = Object.keys(b);\n    if (keysA.length !== keysB.length) {\n      return false;\n    }\n    const differentACount = keysA.filter(key => isDifferent(a[key], b[key])).length;\n    if (differentACount > 0) {\n      return false;\n    }\n    return keysB.filter(key => isDifferent(b[key], a[key])).length === 0;\n  } else if (Array.isArray(a) && Array.isArray(b) && a.length === b.length) {\n    for (let i = a.length; i--; ) {\n      if (a[i] !== b[i]) return false;\n    }\n    return true;\n  } else {\n    // No identical equality\n    return false;\n  }\n};\n\nexport function deepClone(obj: ?{}): {} {\n  if (obj == null) {\n    return {};\n  } else {\n    const clone = {};\n    const original = obj;\n    Object.keys(obj).forEach(key => {\n      if (isObject(original[key])) {\n        clone[key] = deepClone(original[key]);\n      } else {\n        clone[key] = original[key];\n      }\n    });\n    return clone;\n  }\n}\n\nexport function override(base: ?{}, overrides: ?{}): Object {\n  const copy = deepClone(base);\n  if (overrides) {\n    const extension: {} = overrides; // Should be unnecessary!\n    Object.getOwnPropertyNames((extension: {})).forEach(key => {\n      if (isObject(extension[key])) {\n        if (isObject(copy[key])) {\n          copy[key] = override(copy[key], extension[key]);\n        } else {\n          copy[key] = deepClone(extension[key]);\n        }\n      } else {\n        copy[key] = extension[key];\n      }\n    });\n  }\n  return copy;\n}\n\nexport const formatTimeComponent = (\n  integer: number,\n  separator: string = '',\n  emptyIfZero: boolean = false,\n  pad: boolean = true\n) => {\n  return emptyIfZero && integer === 0 ? '' : integer < 10 && pad ? `0${integer}${separator}` : `${integer}${separator}`;\n};\n\nexport const formatTime = (seconds: number, negativeMark: string = '-') => {\n  let rounded = Math.round(seconds);\n  let includedNegativeMark = '';\n  if (typeof seconds !== 'number' || isNaN(seconds) || seconds === Infinity) {\n    rounded = 0;\n  } else if (rounded < 0) {\n    rounded = -rounded;\n    includedNegativeMark = negativeMark;\n  }\n  const days = Math.floor(rounded / 86400);\n  const daysInSeconds = days * 86400;\n  const hours = Math.floor((rounded - daysInSeconds) / 3600);\n  const hoursAndDaysInSeconds = daysInSeconds + hours * 3600;\n  const minutes = Math.floor((rounded - hoursAndDaysInSeconds) / 60);\n  const secs = rounded - hoursAndDaysInSeconds - minutes * 60;\n  return (\n    includedNegativeMark +\n    formatTimeComponent(days, '.', true, false) +\n    formatTimeComponent(hours, ':', days === 0) +\n    formatTimeComponent(minutes, ':', false) +\n    formatTimeComponent(secs)\n  );\n};\n\nexport const formatClockTime = (date: ?Date) => {\n  const isValidDate = date instanceof Date && !isNaN(date.getTime());\n  let hours = 0;\n  let minutes = 0;\n  let seconds = 0;\n  if (isValidDate && date != null) {\n    // Silly construct for flow null check.\n    hours = isValidDate ? date.getHours() : 0;\n    minutes = isValidDate ? date.getMinutes() : 0;\n    seconds = isValidDate ? date.getSeconds() : 0;\n  }\n  return (\n    formatTimeComponent(hours, ':', false) + formatTimeComponent(minutes, ':', false) + formatTimeComponent(seconds)\n  );\n};\n\nexport const getIntervalRunner = (method: () => void, intervalSeconds: number) => {\n  let intervalID: ?IntervalID = null;\n  return {\n    start: () => {\n      if (!intervalID) {\n        intervalID = setInterval(method, intervalSeconds * 1000);\n      }\n    },\n    stop: () => {\n      if (intervalID) {\n        clearInterval(intervalID);\n        intervalID = null;\n      }\n    }\n  };\n};\n","// @flow\nimport * as React from 'react';\nimport { getKeyboardShortcutBlocker, hydrateClassNames } from '../../common';\nimport type { CommonGenericProps, Id } from '../../common';\n\nexport type ItemData = {\n  label: string,\n  id?: Id,\n  data?: any\n};\n\ntype SelectorItemProps = CommonGenericProps & {\n  item: ItemData,\n  index: number,\n  isSelected: boolean,\n  canReceiveFocus: boolean,\n  defaultItemClassName: string,\n  selectedClassName: string,\n  onSelect?: any => void,\n  onRef: (?HTMLElement, number) => void\n};\n\nconst selectItemClasses = classes => classes.selectorItem;\nconst selectItemSelectedClasses = classes => classes.selectorItemSelected || classes.selectorItem;\n\nexport class SelectorItem extends React.Component<SelectorItemProps> {\n  handleRef = (element: ?HTMLElement) => {\n    this.props.onRef(element, this.props.index);\n  };\n\n  handleClick = () => this.props.onSelect && this.props.onSelect(this.props.item.data);\n\n  handleKeyDown = getKeyboardShortcutBlocker(['Enter', ' ']);\n\n  handleKeyUp = (keyboardEvent: KeyboardEvent) => {\n    if (keyboardEvent.key === 'Enter' || keyboardEvent.key === ' ') {\n      keyboardEvent.preventDefault();\n      this.handleClick();\n    }\n  };\n\n  render() {\n    const {\n      className,\n      classNamePrefix,\n      classes,\n      defaultItemClassName,\n      item,\n      isSelected,\n      canReceiveFocus,\n      selectedClassName\n    } = this.props;\n    const { label } = item;\n    const classNames = hydrateClassNames({\n      classes,\n      classNamePrefix,\n      selectClasses: isSelected ? selectItemSelectedClasses : selectItemClasses,\n      classNames: [className, defaultItemClassName, isSelected ? selectedClassName : null]\n    });\n    const tabIndex = canReceiveFocus ? 0 : undefined;\n    return (\n      <div\n        role=\"option\"\n        aria-selected={isSelected}\n        className={classNames}\n        ref={this.handleRef}\n        onClick={this.handleClick}\n        onKeyDown={this.handleKeyDown}\n        onKeyUp={this.handleKeyUp}\n        tabIndex={tabIndex}>\n        <div tabIndex={-1}>{label}</div>\n      </div>\n    );\n  }\n}\n\nexport function focusElement(\n  upwards: boolean,\n  isReverseOrder: boolean,\n  items: Array<?HTMLElement>,\n  baseElement: ?HTMLElement\n) {\n  const elements = (isReverseOrder ? items.slice(0).reverse() : items).concat(baseElement);\n  for (let i = 0; i < elements.length; i++) {\n    if (elements[i] === document.activeElement) {\n      if (upwards) {\n        if (i > 0) {\n          for (let j = i - 1; j >= 0; j--) {\n            const element = elements[j];\n            if (element) {\n              element.focus();\n              return element;\n            }\n          }\n        }\n      } else {\n        if (i < elements.length - 1) {\n          for (let j = i + 1; j < elements.length; j++) {\n            const element = elements[j];\n            if (element) {\n              element.focus();\n              return element;\n            }\n          }\n        }\n      }\n    }\n  }\n}\n","// @flow\nimport * as React from 'react';\nimport { type CommonGenericProps, hydrateClassNames } from '../../common';\nimport ToggleButton from '../ToggleButton/ToggleButton';\nimport { focusElement, SelectorItem } from './helpers';\nimport type { ItemData } from './helpers';\n\ntype Props = CommonGenericProps & {\n  items: Array<any>,\n  selectedItem?: any,\n  reverseOrder?: boolean,\n  itemClassName?: string,\n  collapsedToggleContent?: React.Node,\n  expandedToggleContent?: React.Node,\n  label?: string,\n  itemMapper: any => ItemData,\n  onSelect?: any => void\n};\n\ntype SelectorState = {\n  isExpanded: boolean\n};\n\nconst defaultSelectorClassName = 'selector';\nconst expandToggleClassName = 'selector-toggle';\nconst selectorItemsClassName = 'selector-items';\nconst expandedClassName = 'expanded';\nconst collapsedClassName = 'collapsed';\nconst defaultItemClassName = 'selector-item';\nconst selectedClassName = 'selected';\n\nconst selectCollapsedClasses = classes => classes.selectorCollapsed || classes.selector;\nconst selectExpandedClasses = classes => classes.selectorExpanded || classes.selector;\nconst selectItemsContainerClasses = classes => classes.selectorItemsContainer;\n\nclass Selector extends React.Component<Props, SelectorState> {\n  static defaultProps = {\n    useDefaultClassNaming: true\n  };\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      isExpanded: false\n    };\n  }\n\n  focusableItems: Array<?HTMLElement> = [];\n  toggleElement: ?HTMLElement = null;\n\n  onToggleRef = (toggleElement: ?HTMLElement) => {\n    this.toggleElement = toggleElement;\n  };\n\n  handleToggle = (isOn: boolean) => this.setState({ isExpanded: isOn });\n\n  handleItemRef = (itemElement: ?HTMLElement, index: number) => {\n    this.focusableItems[index] = itemElement;\n  };\n\n  renderSelectorItem = (item: any, index: number) => {\n    const itemData = this.props.itemMapper(item);\n    return (\n      <SelectorItem\n        key={itemData.id}\n        item={itemData}\n        index={index}\n        onSelect={this.props.onSelect}\n        onRef={this.handleItemRef}\n        isSelected={item === this.props.selectedItem}\n        canReceiveFocus={this.state.isExpanded}\n        selectedClassName={selectedClassName}\n        defaultItemClassName={defaultItemClassName}\n        className={this.props.itemClassName}\n        classes={this.props.classes}\n        classNamePrefix={this.props.classNamePrefix}\n      />\n    );\n  };\n\n  handleKeyDown = (keyboardEvent: KeyboardEvent) => {\n    switch (keyboardEvent.key) {\n      case 'ArrowUp':\n      case 'Up':\n        keyboardEvent.preventDefault();\n        return;\n      case 'ArrowDown':\n      case 'Down':\n        if (this.state.isExpanded) {\n          keyboardEvent.preventDefault();\n        }\n        return;\n      default:\n        return;\n    }\n  };\n\n  handleKeyUp = (keyboardEvent: KeyboardEvent) => {\n    if (this.state.isExpanded) {\n      if (keyboardEvent.key === 'ArrowUp' || keyboardEvent.key === 'Up') {\n        keyboardEvent.preventDefault();\n        focusElement(true, this.props.reverseOrder || false, this.focusableItems, this.toggleElement);\n      }\n      if (keyboardEvent.key === 'ArrowDown' || keyboardEvent.key === 'Down') {\n        keyboardEvent.preventDefault();\n        const focusedElement = focusElement(\n          false,\n          this.props.reverseOrder || false,\n          this.focusableItems,\n          this.toggleElement\n        );\n        if (focusedElement === this.toggleElement) {\n          this.setState({ isExpanded: false });\n        }\n      }\n    } else {\n      if (keyboardEvent.key === 'ArrowUp' || keyboardEvent.key === 'Up') {\n        keyboardEvent.preventDefault();\n        this.setState({ isExpanded: true });\n      }\n    }\n  };\n\n  handleMouseLeave = () => {\n    this.setState({ isExpanded: false });\n  };\n\n  render() {\n    const {\n      className,\n      classNamePrefix,\n      classes,\n      items,\n      collapsedToggleContent,\n      expandedToggleContent,\n      reverseOrder,\n      label\n    } = this.props;\n    const renderedItems = items\n      ? reverseOrder\n        ? items.map(this.renderSelectorItem).reverse()\n        : items.map(this.renderSelectorItem)\n      : null;\n    const classNames = hydrateClassNames({\n      classes,\n      classNamePrefix,\n      selectClasses: this.state.isExpanded ? selectExpandedClasses : selectCollapsedClasses,\n      classNames: [className, defaultSelectorClassName, this.state.isExpanded ? expandedClassName : collapsedClassName]\n    });\n    const itemsContainerClassNames = hydrateClassNames({\n      classes,\n      selectClasses: selectItemsContainerClasses,\n      classNamePrefix,\n      classNames: [selectorItemsClassName]\n    });\n    const toggleButtonClasses = classes\n      ? {\n          toggleButtonOff: classes.selectorToggle || classes.selectorToggleOff,\n          toggleButtonOn: classes.selectorToggleOn\n        }\n      : null;\n\n    return (\n      <div\n        className={classNames}\n        onKeyUp={this.handleKeyUp}\n        onKeyDown={this.handleKeyDown}\n        onMouseLeave={this.handleMouseLeave}>\n        <ToggleButton\n          isOn={this.state.isExpanded}\n          className={expandToggleClassName}\n          classNamePrefix={classNamePrefix}\n          classes={toggleButtonClasses}\n          label={label}\n          onToggle={this.handleToggle}\n          onRef={this.onToggleRef}\n          toggledOffContent={collapsedToggleContent}\n          toggledOnContent={expandedToggleContent}\n        />\n        <div role=\"listbox\" className={itemsContainerClassNames}>\n          {renderedItems}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Selector;\n","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground, PropsTable } from 'docz';\nimport Selector from './Selector';\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"selector\"}}>{`Selector`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`A generic component containing a button and an expandable/collapsable list of selectable items.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"summary\"}}>{`Summary`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`It operates on a list of items which can be objects or primitive values. The AudioSelector and SubtitlesSelector uses a Selector with a list of AvailableTrack. The QualitySelector makes the Selector operate on a list of numbers.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`When marking an item as selected, it depends on strict equality between the specified selectedItem, and one of the items in the list. This means an object, e.g. AvailableTrack, cannot be cloned or recreated.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`When an item is selected, the onSelect callback is invoked with the item object from the list as an argument.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`An item mapper must be used for making the list items presentable in the selector. This converts the item object of the specific type into an object with ID, label, and the original item as a data property.`}</MDXTag>\n<Playground __codesandbox={`undefined`} __position={0} __code={'<Selector />'} __scope={{props: this ? this.props : props,Selector}}>\n    <Selector/>\n</Playground>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"props\"}}>{`Props`}</MDXTag>\n<PropsTable of={Selector} />\n           </MDXTag>\n  }\n}\n  ","// @flow\nimport * as React from 'react';\nimport { type CommonGenericProps, getKeyboardShortcutBlocker, hydrateClassNames } from '../../common';\n\ntype Props = CommonGenericProps & {\n  /** Set to true if the button should be in the toggled on mode. */\n  isOn?: boolean,\n  /** The label will appear in the title attribute of the root DOM element of the toggle button. */\n  label?: string,\n  /** The button content to be displayed when the button is toggled off. */\n  toggledOffContent?: React.Node,\n  /** The button content to be displayed when the button is toggled on. */\n  toggledOnContent?: React.Node,\n  /** A callback method that will be invoked when the button is clicked and the value toggled. If the button has been toggled on, true is passed to the callback. */\n  onToggle?: boolean => void,\n  /** A callback method invoked with the rendered button element, for focus purposes. */\n  onRef?: (?HTMLElement) => void\n};\n\nconst baseClassName = 'toggle-button';\nconst offClassName = 'toggled-off';\nconst onClassName = 'toggled-on';\n\nconst selectOffClasses = classes => classes.toggleButtonOff || classes.toggleButton;\nconst selectOnClasses = classes => classes.toggleButtonOn || classes.toggleButton;\n\n/**\n * Renders a button with two states - toggled on and off. When clicked, it reports back the opposite state.\n */\nclass ToggleButton extends React.Component<Props> {\n  static defaultProps = {\n    useDefaultClassNaming: true\n  };\n\n  handleClick = () => this.props.onToggle && this.props.onToggle(!this.props.isOn);\n\n  handleKeyDown = getKeyboardShortcutBlocker(['Enter', ' ']);\n\n  handleKeyUp = (keyboardEvent: KeyboardEvent) => {\n    if (keyboardEvent.key === 'Enter' || keyboardEvent.key === ' ') {\n      keyboardEvent.preventDefault();\n      this.handleClick();\n    }\n  };\n\n  render() {\n    const { isOn, label, className, classNamePrefix, toggledOnContent, toggledOffContent, onRef, classes } = this.props;\n    const toggleClassName = isOn ? onClassName : offClassName;\n    const classNames = hydrateClassNames({\n      classes,\n      selectClasses: isOn ? selectOnClasses : selectOffClasses,\n      classNamePrefix,\n      classNames: [className, baseClassName, toggleClassName]\n    });\n    const content = isOn ? toggledOnContent : toggledOffContent;\n    return (\n      <div\n        role=\"button\"\n        aria-pressed={isOn}\n        title={label}\n        onClick={this.handleClick}\n        onKeyUp={this.handleKeyUp}\n        onKeyDown={this.handleKeyDown}\n        ref={onRef}\n        className={classNames}\n        tabIndex={0}>\n        <div tabIndex={-1}>{content}</div>\n      </div>\n    );\n  }\n}\n\nexport default ToggleButton;\n"],"sourceRoot":""}